// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model AvailabilityItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  day        String
  from       String
  to         String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model VacationsItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  from       String
  to         String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Booking {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  start            String
  end              String
  status           String
  client           User?         @relation(fields: [clientId], references: [id])
  clientId         String?       @db.ObjectId
  branch           Branch        @relation(fields: [branchId], references: [id])
  branchId         String        @db.ObjectId
  services         Service[]     @relation(fields: [serviceIDs], references: [id])
  serviceIDs       String[]      @db.ObjectId
  employee         Employee      @relation(fields: [employeeId], references: [id])
  employeeId       String        @db.ObjectId
  clientEmail      String?
  clientPhone      String?
  clientName       String?
  clientFamilyName String?
}

model Employee {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  givenName    String
  familyName   String
  user         User?              @relation(fields: [userId], references: [id])
  userId       String?            @db.ObjectId
  phone        String
  services     Service[]          @relation(fields: [serviceIDs], references: [id])
  serviceIDs   String[]           @db.ObjectId
  branches     Branch[]           @relation(fields: [branchesIDs], references: [id])
  branchesIDs  String[]           @db.ObjectId
  bookings     Booking[]
  availability AvailabilityItem[]
  vacations    VacationsItem[]
}

model Service {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  currency     String
  duration     Int
  branches     Branch[]   @relation(fields: [branchesIDs], references: [id])
  branchesIDs  String[]   @db.ObjectId
  description  String
  employees    Employee[] @relation(fields: [employeesIDs], references: [id])
  employeesIDs String[]   @db.ObjectId
  bookings     Booking[]  @relation(fields: [bookingIDs], references: [id])
  bookingIDs   String[]   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId String?   @db.ObjectId
}

model Branch {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  phone         String
  email         String
  name          String
  description   String
  image         String?
  business      Business   @relation(fields: [businessId], references: [id])
  businessId    String     @db.ObjectId
  employees     Employee[] @relation(fields: [employeesIDs], references: [id])
  employeesIDs  String[]   @db.ObjectId
  services      Service[]  @relation(fields: [servicesIDs], references: [id])
  servicesIDs   String[]   @db.ObjectId
  bookings      Booking[]
  categories    Category[] @relation(fields: [categoriesIDs], references: [id])
  categoriesIDs String[]   @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  Business    Business? @relation(fields: [businessId], references: [id])
  businessId  String?   @db.ObjectId
  services    Service[]
  branches    Branch[]  @relation(fields: [branchesIDs], references: [id])
  branchesIDs String[]  @db.ObjectId
}

model Business {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  phone        String       @unique
  owner        User         @relation(fields: [ownerId], references: [id])
  ownerId      String       @unique @db.ObjectId
  handle       String       @unique
  branches     Branch[]
  landing      LandingInfo?
  website      String?
  instagramUrl String?
  facebookUrl  String?
  categories   Category[]
  services     Service[]
}

model BusinessImage {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  url           String
  landingInfo   LandingInfo? @relation(fields: [landingInfoId], references: [id])
  landingInfoId String?      @db.ObjectId
}

model LandingInfo {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  images      BusinessImage[]
  displayName String
  cta         String?
  description String
  business    Business?       @relation(fields: [businessId], references: [id])
  businessId  String?         @unique @db.ObjectId
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  type       String
  title      String
  resourceId String
  createdAt  DateTime @default(now())
  seen       Boolean
}

model User {
  email         String         @unique
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  password      String         @default("")
  posts         Post[]
  business      Business?
  givenName     String
  notifications Notification[]
  familyName    String
  userName      String
  userType      String
  bookings      Booking[]
  Employee      Employee[]
  verifyToken   String         @default("")
  phone         String?        @unique
}

model Post {
  authorId  String? @db.ObjectId
  content   String?
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  published Boolean @default(false)
  title     String
  author    User?   @relation(fields: [authorId], references: [id])
}
