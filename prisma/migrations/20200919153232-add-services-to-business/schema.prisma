// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url = "***"
}

model AvailabilityItem {
  id         String   @default(cuid()) @id
  day        Day
  from       String
  to         String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model VacationsItem {
  id         String   @default(cuid()) @id
  from       String
  to         String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model Booking {
  id               String        @default(cuid()) @id
  start            String
  end              String
  status           BookingStatus
  client           User?         @relation(fields: [clientId], references: [id])
  clientId         String?
  branch           Branch        @relation(fields: [branchId], references: [id])
  branchId         String
  services         Service[]
  employee         Employee      @relation(fields: [employeeId], references: [id])
  employeeId       String
  clientEmail      String?
  clientPhone      String?
  clientName       String?
  clientFamilyName String?
}

enum BookingStatus {
  COMPLETED
  CONFIRMED
  PENDING
  CANCELLED
}

model Employee {
  id           String             @default(cuid()) @id
  givenName    String
  familyName   String
  user         User?              @relation(fields: [userId], references: [id])
  userId       String?
  phone        String
  services     Service[]
  branches     Branch[]
  bookings     Booking[]
  availability AvailabilityItem[]
  vacations    VacationsItem[]
}

model Service {
  id          String     @default(cuid()) @id
  name        String
  price       Float
  currency    String
  duration    Int
  branches    Branch[]
  description String
  employees   Employee[]
  bookings    Booking[]
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  Business    Business?  @relation(fields: [businessId], references: [id])
  businessId  String?
}

model Branch {
  id          String     @default(cuid()) @id
  address     String
  phone       String
  email       String
  name        String
  description String
  image       String?
  business    Business   @relation(fields: [businessId], references: [id])
  businessId  String
  employees   Employee[]
  services    Service[]
  bookings    Booking[]
  categories  Category[]
}

model Category {
  id         String    @default(cuid()) @id
  name       String
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId String?
  services   Service[]
  branches   Branch[]
}

model Business {
  id           String       @default(cuid()) @id
  name         String
  email        String       @unique
  phone        String       @unique
  owner        User         @relation(fields: [ownerId], references: [id])
  ownerId      String
  handle       String       @unique
  branches     Branch[]
  landing      LandingInfo?
  website      String?
  instagramUrl String?
  facebookUrl  String?
  categories   Category[]
  services     Service[]
}

model BusinessImage {
  id            String       @default(cuid()) @id
  url           String
  landingInfo   LandingInfo? @relation(fields: [landingInfoId], references: [id])
  landingInfoId String?
}

model LandingInfo {
  id          String          @default(cuid()) @id
  images      BusinessImage[]
  displayName String
  cta         String?
  description String
  business    Business?       @relation(fields: [businessId], references: [id])
  businessId  String?
}

model Notification {
  id         String   @default(cuid()) @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       String
  title      String
  resourceId String
  createdAt  DateTime @default(now())
  seen       Boolean
}

model User {
  email         String         @unique
  id            String         @default(cuid()) @id
  name          String?
  password      String         @default("")
  posts         Post[]
  business      Business?
  givenName     String
  notifications Notification[]
  familyName    String
  userName      String
  userType      UserType
  bookings      Booking[]
  Employee      Employee[]
  verifyToken   String         @default("")
}

model Post {
  authorId  String?
  content   String?
  id        String  @default(cuid()) @id
  published Boolean @default(false)
  title     String
  author    User?   @relation(fields: [authorId], references: [id])
}

enum UserType {
  ADMIN
  USER
  GUEST
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
