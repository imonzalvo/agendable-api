### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type AvailabilityItem {
  day: String!
  employee: Employee!
  from: String!
  id: ID!
  to: String!
}

type Booking {
  branch: Branch!
  client: User
  clientEmail: String
  clientFamilyName: String
  clientName: String
  clientPhone: String
  employee: Employee!
  end: String!
  id: ID!
  services: [Service!]!
  start: String!
  status: String!
}

input BookingsWhereInputType {
  from: String!
  to: String!
}

type Branch {
  address: String!
  bookings: [Booking!]!
  business: Business!
  categories: [Category!]!
  description: String!
  email: String!
  employees: [Employee!]!
  id: ID!
  image: String
  name: String!
  phone: String!
  services: [Service!]!
}

type Business {
  branches: [Branch!]!
  categories: [Category!]!
  email: String!
  facebookUrl: String
  handle: String!
  id: ID!
  instagramUrl: String
  landing: LandingInfo
  name: String!
  owner: User!
  phone: String!
  services: [Service!]!
  website: String
}

type BusinessImage {
  id: ID!
  landingInfo: LandingInfo
  url: String!
}

type Category {
  Business: Business
  branches: [Branch!]!
  id: ID!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Employee {
  availability: [AvailabilityItem!]!
  availableTime(date: String, duration: Int): [EmployeeAvailableTime]
  bookings: [Booking!]!
  branches: [Branch!]!
  familyName: String!
  givenName: String!
  id: ID!
  phone: String!
  services: [Service!]!
  user: User
  vacations: [VacationsItem!]!
}

type EmployeeAvailableTime {
  from: String
  to: String
}

type EmployeesAvailableTime {
  availability: [EmployeeAvailableTime]
  id: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LandingInfo {
  business: Business
  cta: String
  description: String!
  displayName: String!
  id: ID!
  images: [BusinessImage!]!
}

input LandingInfoInputType {
  businessId: String!
  cta: String
  description: String!
  displayName: String!
  facebookUrl: String
  imagesUrl: [String!]
  instagramUrl: String
  website: String
}

type Mutation {
  addCategoryToBusiness(businessId: ID, categories: [String]): Business
  addImagesLandingInfo(imagesUrl: [String], landingInfoId: ID): LandingInfo
  confirmUser(email: String, verifyToken: String): AuthPayload
  createAvailabilityItem(day: String!, employeeId: String!, from: String!, to: String!): AvailabilityItem
  createBooking(branchId: String!, clientEmail: String, clientFamilyName: String, clientId: String, clientName: String, clientPhone: String, employeeId: String!, end: String!, servicesId: [String!]!, start: String!, status: String): Booking
  createBranch(address: String!, description: String!, email: String!, image: String, name: String!, phone: String!): Branch
  createBusiness(categories: [String], email: String!, facebookUrl: String, handle: String!, instagramUrl: String, name: String!, phone: String!, website: String): Business
  createDraft(content: String, title: String): Post
  createEmployee(branchesId: [String], familyName: String!, givenName: String!, phone: String!, servicesId: [String], userId: String): Employee
  createLandingInfo(businessId: ID!, cta: String, description: String!, displayName: String!, imagesUrl: [String!]!): LandingInfo
  createService(branchesId: [String!]!, currency: String!, description: String!, duration: Int!, name: String!, price: Float!): Service
  createVacationsItem(employeeId: String!, from: String!, to: String!): VacationsItem
  deleteBooking(id: ID!): Booking
  deleteBranch(id: ID!): Branch
  deleteLandingInfo(id: ID): LandingInfo
  deletePost(id: ID): Post
  login(email: String, password: String, phone: String): AuthPayload
  publish(id: ID): Post
  signup(email: String, familyName: String, givenName: String, name: String, password: String, phone: String, userName: String, userType: String): AuthPayload
  updateAvailabilityItem(day: String, from: String, id: ID!, to: String): AvailabilityItem
  updateBooking(branchId: String, clientEmail: String, clientFamilyName: String, clientId: String, clientName: String, clientPhone: String, employeeId: String, end: String, id: ID!, servicesId: [String], start: String, status: String): Booking
  updateBranch(address: String, categoriesId: [String], description: String, email: String, id: ID!, image: String, name: String, phone: String, servicesId: [String]): Branch
  updateBusiness(email: String, facebookUrl: String, handle: String, id: ID!, instagramUrl: String, name: String, phone: String, website: String): Business
  updateEmployee(branchesId: [String], familyName: String, givenName: String, id: ID!, phone: String, servicesId: [String], userId: String): Employee
  updateLandingInfo(cta: String, description: String, displayName: String, id: ID!): LandingInfo
  updateNotification(id: ID!, seen: Boolean!): Notification
  updateService(currency: String, description: String, duration: Int, id: String!, name: String, price: Float): Service
  updateVacationsItem(employeeId: String, from: String, id: ID!, to: String): VacationsItem
}

type Notification {
  createdAt: DateTime!
  id: ID!
  seen: Boolean!
  title: String!
  type: String!
  user: User!
}

type Post {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

type Query {
  emailAvailability(email: String): Boolean
  feed: [Post]
  filterPosts(searchString: String): [Post]
  getAvailabilityItem(id: ID): AvailabilityItem
  getAvailabilityItems: [AvailabilityItem]
  getBooking(id: String): Booking
  getBookings(where: BookingsWhereInputType): [Booking]
  getBookingsByBranch(branchId: String): [Booking]
  getBookingsByBusiness(id: String): [Booking]
  getBookingsByDate(branchId: String, employeeId: String, endDate: String!, startDate: String!): [Booking]
  getBranch(id: String): Branch
  getBranches: [Branch]
  getBusiness(id: String): Business
  getBusinessByHandle(handle: String): Business
  getBusinessEmployees(id: ID): [Employee]
  getBusinesses: [Business]
  getEmployee(id: String): Employee
  getEmployeeAvailableDays(employeeId: ID, endDate: String, startDate: String): [String]
  getEmployeeAvailableTime(date: String, duration: Int, id: ID): [EmployeeAvailableTime]
  getEmployees: [Employee]
  getEmployeesAvailableTime(date: String, duration: Int, ids: [ID]): [EmployeesAvailableTime]
  getService(id: String): Service
  getServices: [Service]
  getVacationsItem(id: ID): VacationsItem
  getVacationsItems: [VacationsItem]
  me: User
  post(id: ID): Post
}

type Service {
  bookings: [Booking!]!
  branches: [Branch!]!
  currency: String!
  description: String!
  duration: Int!
  employees: [Employee!]!
  id: ID!
  name: String!
  price: Float!
}

type Subscription {
  deletedBooking(branchId: String): Booking
  newBooking(branchId: String): Booking
  updatedBooking(branchId: String): Booking
}

type User {
  bookings: [Booking!]!
  business: Business
  email: String!
  familyName: String!
  givenName: String!
  id: ID!
  name: String
  notifications(after: String, take: Int): [Notification]
  phone: String
  posts: [Post!]!
  userType: String!
  verifyToken: String!
}

type VacationsItem {
  employee: Employee!
  from: String!
  id: ID!
  to: String!
}