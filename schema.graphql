### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type AvailabilityItem {
  day: Day!
  employee: Employee!
  from: String!
  id: String!
  to: String!
}

type Booking {
  branch: Branch!
  client: User
  clientEmail: String
  clientFamilyName: String
  clientName: String
  clientPhone: String
  employee: Employee!
  end: String!
  id: String!
  services(skip: Int): [Service!]!
  start: String!
  status: BookingStatus!
}

enum BookingStatus {
  CANCELLED
  COMPLETED
  CONFIRMED
  PENDING
}

type Branch {
  address: String!
  bookings(skip: Int): [Booking!]!
  business: Business!
  description: String!
  email: String!
  employees(skip: Int): [Employee!]!
  id: String!
  image: String
  name: String!
  phone: String!
  services(skip: Int): [Service!]!
}

type Business {
  branches(skip: Int): [Branch!]!
  email: String!
  handle: String!
  id: String!
  name: String!
  owner: User!
  phone: String!
}

enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

type Employee {
  availability(skip: Int): [AvailabilityItem!]!
  bookings(skip: Int): [Booking!]!
  branches(skip: Int): [Branch!]!
  familyName: String!
  givenName: String!
  id: String!
  phone: String!
  services(skip: Int): [Service!]!
  user: User
  vacations(skip: Int): [VacationsItem!]!
}

type EmployeeAvailableTime {
  from: String!
  to: String!
}

type Mutation {
  confirmUser(email: String, verifyToken: String): AuthPayload!
  createAvailabilityItem(day: String!, employeeId: String!, from: String!, to: String!): AvailabilityItem!
  createBooking(branchId: String!, clientEmail: String, clientFamilyName: String, clientId: String, clientName: String, clientPhone: String, employeeId: String!, end: String!, servicesId: [String!]!, start: String!, status: String): Booking!
  createBranch(address: String!, description: String!, email: String!, image: String, name: String!, phone: String!): Branch!
  createBusiness(email: String!, handle: String!, name: String!, phone: String!): Business!
  createDraft(content: String, title: String): Post!
  createEmployee(branchesId: [String!], familyName: String!, givenName: String!, phone: String!, servicesId: [String!], userId: String): Employee!
  createService(branchesId: [String!]!, currency: String!, description: String!, duration: Int!, name: String!, price: Float!): Service!
  createVacationsItem(employeeId: String!, from: String!, to: String!): VacationsItem!
  deleteBooking(id: ID!): Booking
  deletePost(id: ID): Post
  login(email: String, password: String): AuthPayload!
  publish(id: ID): Post
  signup(email: String, familyName: String, givenName: String, name: String, password: String, userName: String, userType: String): AuthPayload!
  updateAvailabilityItem(day: String, from: String, id: ID!, to: String): AvailabilityItem!
  updateBooking(branchId: String, clientEmail: String, clientFamilyName: String, clientId: String, clientName: String, clientPhone: String, employeeId: String, end: String, id: ID!, servicesId: [String!], start: String, status: String): Booking!
  updateBranch(address: String, description: String, email: String, id: ID!, image: String, name: String, phone: String, servicesId: [String!]): Branch!
  updateBusiness(email: String, handle: String, id: ID!, name: String, phone: String): Business!
  updateEmployee(branchesId: [String!], familyName: String, givenName: String, id: ID!, phone: String, servicesId: [String!], userId: String): Employee!
  updateVacationsItem(employeeId: String, from: String, id: ID!, to: String): VacationsItem!
}

type Post {
  author: User
  content: String
  id: String!
  published: Boolean!
  title: String!
}

type Query {
  emailAvailability(email: String): Boolean
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  getAvailabilityItem(id: ID): AvailabilityItem
  getAvailabilityItems: [AvailabilityItem!]
  getBooking(id: String): Booking
  getBookings: [Booking!]
  getBookingsByBranch(branchId: String): [Booking!]
  getBookingsByBusiness(id: String): [Booking!]
  getBookingsByDate(branchId: String, employeeId: String, endDate: String!, startDate: String!): [Booking!]
  getBranch(id: String): Branch
  getBranches: [Branch!]
  getBusiness(id: String): Business
  getBusinessByHandle(handle: String): Business
  getBusinesses: [Business!]
  getEmployee(id: String): Employee
  getEmployeeAvailableDays(employeeId: ID, endDate: String, startDate: String): [String!]
  getEmployeeAvailableTime(date: String, duration: Int, id: ID): [EmployeeAvailableTime!]
  getEmployees: [Employee!]
  getService(id: String): Service
  getServices: [Service!]
  getVacationsItem(id: ID): VacationsItem
  getVacationsItems: [VacationsItem!]
  me: User
  post(id: ID): Post
}

type Service {
  bookings(skip: Int): [Booking!]!
  branches(skip: Int): [Branch!]!
  currency: String!
  description: String!
  duration: Int!
  employees(skip: Int): [Employee!]!
  id: String!
  name: String!
  price: Float!
}

type Subscription {
  deletedBooking(branchId: String): Booking!
  newBooking(branchId: String): Booking!
  updatedBooking(branchId: String): Booking!
}

type User {
  bookings: [Booking!]!
  business: Business
  email: String!
  familyName: String!
  givenName: String!
  id: String!
  name: String
  posts: [Post!]!
  userType: UserType!
  verifyToken: String!
}

enum UserType {
  ADMIN
  GUEST
  USER
}

type VacationsItem {
  employee: Employee!
  from: String!
  id: String!
  to: String!
}
