### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type AvailabilityItem {
  day: Day!
  employee: Employee!
  from: String!
  id: Int!
  to: String!
}

type Booking {
  branch: Branch!
  client: User
  clientEmail: String
  clientFamilyName: String
  clientName: String
  clientPhone: String
  employee: Employee!
  end: String!
  id: Int!
  services(skip: Int): [Service!]!
  start: String!
  status: BookingStatus!
}

enum BookingStatus {
  CANCELLED
  COMPLETED
  CONFIRMED
  PENDING
}

type Branch {
  address: String!
  bookings(skip: Int): [Booking!]!
  business: Business!
  description: String!
  email: String!
  employees(skip: Int): [Employee!]!
  id: Int!
  image: String
  name: String!
  phone: String!
  services(skip: Int): [Service!]!
}

type Business {
  branches(skip: Int): [Branch!]!
  email: String!
  handle: String!
  id: Int!
  name: String!
  owner: User!
  phone: String!
}

enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

type Employee {
  bookings(skip: Int): [Booking!]!
  branches(skip: Int): [Branch!]!
  familyName: String!
  givenName: String!
  id: Int!
  phone: String!
  services(skip: Int): [Service!]!
  user: User
}

type Mutation {
  createAvailabilityItem(day: String, employeeId: Int, from: String, to: String): AvailabilityItem!
  createBooking(branchId: Int!, clientEmail: String, clientFamilyName: String, clientId: Int, clientName: String, clientPhone: String, employeeId: Int!, end: String, servicesId: [Int!]!, start: String, status: String): Booking!
  createBranch(address: String, description: String, email: String, image: String, name: String, phone: String): Branch!
  createBusiness(email: String, handle: String, name: String, phone: String): Business!
  createDraft(content: String, title: String): Post!
  createEmployee(branchesId: [Int!], familyName: String, givenName: String, phone: String, servicesId: [Int!], userId: Int): Employee!
  createService(branchesId: [Int!]!, currency: String, description: String, duration: Int, name: String, price: Float): Service!
  createVacationsItem(employeeId: Int, from: String, to: String): VacationsItem!
  deletePost(id: ID): Post
  login(email: String, password: String): AuthPayload!
  publish(id: ID): Post
  signup(email: String, familyName: String, givenName: String, name: String, password: String, userName: String, userType: String): AuthPayload!
  updateAvailabilityItem(day: String, from: String, id: ID, to: String): AvailabilityItem!
  updateBooking(branchId: Int, clientEmail: String, clientFamilyName: String, clientId: Int, clientName: String, clientPhone: String, employeeId: Int, end: String, id: ID, servicesId: [Int!], start: String, status: String): Booking!
  updateBranch(address: String, description: String, email: String, id: ID, image: String, name: String, phone: String, servicesId: [Int!]): Branch!
  updateBusiness(email: String, handle: String, id: ID, name: String, phone: String): Business!
  updateEmployee(branchesId: [Int!], familyName: String, givenName: String, id: ID, phone: String, servicesId: [Int!], userId: Int): Employee!
  updateVacationsItem(employeeId: Int, from: String, id: ID, to: String): VacationsItem!
}

type Post {
  author: User
  content: String
  id: Int!
  published: Boolean!
  title: String!
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  getAvailabilityItem(id: ID): AvailabilityItem
  getAvailabilityItems: [AvailabilityItem!]
  getBooking(id: Int): Booking
  getBookings: [Booking!]
  getBookingsByBranch(branchId: Int): [Booking!]
  getBookingsByBusiness(businessId: Int): [Booking!]
  getBranch(id: Int): Branch
  getBranches: [Branch!]
  getBusiness(id: Int): Business
  getBusinesses: [Business!]
  getEmployee(id: Int): Employee
  getEmployees: [Employee!]
  getService(id: Int): Service
  getServices: [Service!]
  getVacationsItem(id: ID): VacationsItem
  getVacationsItems: [VacationsItem!]
  me: User
  post(id: ID): Post
}

type Service {
  bookings(skip: Int): [Booking!]!
  branches(skip: Int): [Branch!]!
  currency: String!
  description: String!
  duration: Int!
  employees(skip: Int): [Employee!]!
  id: Int!
  name: String!
  price: Float!
}

type User {
  bookings: [Booking!]!
  business: Business
  email: String!
  familyName: String!
  givenName: String!
  id: Int!
  name: String
  posts: [Post!]!
  userType: UserType!
}

enum UserType {
  ADMIN
  GUEST
  USER
}

type VacationsItem {
  employee: Employee!
  from: String!
  id: Int!
  to: String!
}
